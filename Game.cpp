/*
This is the function implementation for the Game class.
*/

#include "Game.hpp"


/* The Game constructor will dynamically allocate each location and links them together. */
Game::Game()
{
	// Seed for random functions
	unsigned seed;
	seed = time(0);
	srand(seed);

	// dynamically allocate Location objects
	hillsborad = new Hillsborad;
	ashenvale = new Ashenvale;
	desolace = new Desolace;
	stonetalon = new Stonetalon;
	barrens = new Barrens;
	swamp = new Swamp;
	plaguelands = new Plaguelands;
	stranglethorn = new Stranglethorn;
	wetlands = new Wetlands;

	// link adjacent locations to Hillsborad
	hillsborad->setNorth(plaguelands);
	hillsborad->setEast(ashenvale);
	hillsborad->setSouth(stonetalon);
	hillsborad->setWest(desolace);

	// link adjacent locations to Ashenvale
	ashenvale->setNorth(stranglethorn);
	ashenvale->setEast(desolace);
	ashenvale->setSouth(barrens);
	ashenvale->setWest(hillsborad);

	// link adjacent locations to Desolace
	desolace->setNorth(wetlands);
	desolace->setEast(hillsborad);
	desolace->setSouth(swamp);
	desolace->setWest(ashenvale);

	// link adjacent locations to Stonetalon
	stonetalon->setNorth(hillsborad);
	stonetalon->setEast(barrens);
	stonetalon->setSouth(plaguelands);
	stonetalon->setWest(swamp);

	// link adjacent locations to Barrens
	barrens->setNorth(ashenvale);
	barrens->setEast(swamp);
	barrens->setSouth(stranglethorn);
	barrens->setWest(stonetalon);

	// link adjacent locations to Swamp of Sorrows
	swamp->setNorth(desolace);
	swamp->setEast(stonetalon);
	swamp->setSouth(wetlands);
	swamp->setWest(barrens);

	// link adjacent locations to Plaguelands
	plaguelands->setNorth(stonetalon);
	plaguelands->setEast(stranglethorn);
	plaguelands->setSouth(hillsborad);
	plaguelands->setWest(wetlands);

	// link adjacent locations to Stranglethorn
	stranglethorn->setNorth(barrens);
	stranglethorn->setEast(wetlands);
	stranglethorn->setSouth(ashenvale);
	stranglethorn->setWest(plaguelands);

	// link adjacent locations to Wetlands
	wetlands->setNorth(swamp);
	wetlands->setEast(plaguelands);
	wetlands->setSouth(desolace);
	wetlands->setWest(stranglethorn);

	// Current location is Stranglethorn
	current = stranglethorn;

	// call to game loop function
	gameOperations();

	// set enemy to NULL
	enemy = NULL;
}

/* This is the game loop that will control the operations of the game */
void Game::gameOperations()
{
	player = new Player();
	int fights = 1;
	while (fights <= 5)
	{
		cout << "Fights: " << fights << endl;
		enemy = generateEnemy();
		duel(player, enemy);

		// return allocated memory to the heap and set enemy pointer back to NULL
		delete enemy;
		enemy = NULL;

		fights++;
	}
}

/* This function will generate and return an enemy object. There are currently 10 types of enemies available. The function will generate a random number
1-10 and that value will dictate which type of enemy is dynamically allocated. */
Enemy* Game::generateEnemy()
{
	// generate random number 1-10
	int choice = rand() % 10 + 1;
	
	switch (choice)
	{
	case 1: enemy = new Skeleton;
		break;
	case 2: enemy = new Zombie;
		break;
	case 3: enemy = new Troll;
		break;
	case 4: enemy = new Ogre;
		break;
	case 5: enemy = new Goblin;
		break;
	case 6: enemy = new Vampire;
		break;
	case 7: enemy = new Barbarian;
		break;
	case 8: enemy = new Crocodile;
		break;
	case 9: enemy = new Jaguar;
		break;
	case 10: enemy = new Basilisk;
		break;
	}
	return enemy;
}

/* This function takes a Player pointer and an Enemy pointer as parameters. Each object will take turns attacking and defending until their hits > 0 */
void Game::duel(Player *player, Enemy *enemy)
{
	int round = 1;
	// The loop will iterate for as long as the player and the enemy's health > 0
	while (player->getHits() > 0 && enemy->getHits() > 0)
	{
		cout << "Round " << round << endl;
		cout << "The " << enemy->getName() << " has " << enemy->getHits() << " hits remaining. " << endl;
		enemy->defense(player->attack(enemy)); // The enemy will defend the attack value generated by the player.
		cout << "You have " << player->getHits() << " hits remaining. " << endl;
		player->defense(enemy->attack()); // The player will defend the attack value generated by the enemy.
		//checkSlain(enemy, player);
		cout << endl;
		round++;
	}
}

/* This function will return the name of the current location */
void Game::displayLocation()
{
	cout << current->getName();
}

/* Shifts the current location to the it's north pointer */
void Game::moveNorth()
{
	current = current->getNorth();
}

/* Shifts the current location to the it's east pointer */
void Game::moveEast()
{
	current = current->getEast();
}

/* Shifts the current location to the it's south pointer */
void Game::moveSouth()
{
	current = current->getSouth();
}

/* Shifts the current location to the it's west pointer */
void Game::moveWest()
{
	current = current->getWest();
}

/* The game destructor will free any allocated memory. */
Game::~Game()
{
	delete hillsborad;
	delete ashenvale;
	delete desolace;
	delete stonetalon;
	delete barrens;
	delete swamp;
	delete plaguelands;
	delete stranglethorn;
	delete wetlands;
	delete player;
	delete enemy;
}
